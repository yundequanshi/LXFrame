//apply plugin: 'com.android.application'
//apply from: 'upload_nexus.gradle'
apply plugin: 'com.github.dcendents.android-maven' // ADD THIS
apply plugin: 'com.android.library'
group = 'com.base.frame'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
//        applicationId "com.base.frame"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api 'com.android.support:appcompat-v7:28.0.0'
    api 'com.android.support:support-v4:28.0.0'
    api 'com.android.support:design:28.0.0'
    api 'com.blankj:utilcode:1.20.3'
    api 'org.greenrobot:eventbus:3.1.1'
    api 'com.qmuiteam:qmui:1.1.7'
    api 'com.github.LuckSiege.PictureSelector:picture_library:v2.2.3'
    api 'jp.wasabeef:glide-transformations:3.3.0'
    api 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'
    api 'com.tencent:mmkv:1.0.10'
    api 'com.squareup.retrofit2:retrofit:2.4.0'
    api 'com.squareup.retrofit2:converter-gson:2.4.0'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    api 'io.reactivex.rxjava2:rxandroid:2.1.0'
    api 'com.squareup.okhttp3:okhttp:3.11.0'
    api 'com.squareup.okhttp3:logging-interceptor:3.11.0'
}

// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}

// 制作文档(Javadoc)
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}